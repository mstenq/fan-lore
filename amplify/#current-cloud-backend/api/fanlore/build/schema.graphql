type Story {
  id: ID!
  title: String!
  description: String
  author: String!
  image: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelStoryConnection {
  items: [Story]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelStoryFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  description: ModelStringFilterInput
  author: ModelStringFilterInput
  image: ModelStringFilterInput
  and: [ModelStoryFilterInput]
  or: [ModelStoryFilterInput]
  not: ModelStoryFilterInput
}

type Query {
  getStory(id: ID!): Story
  listStorys(filter: ModelStoryFilterInput, limit: Int, nextToken: String): ModelStoryConnection
}

input CreateStoryInput {
  id: ID
  title: String!
  description: String
  author: String!
  image: String
}

input UpdateStoryInput {
  id: ID!
  title: String
  description: String
  author: String
  image: String
}

input DeleteStoryInput {
  id: ID
}

type Mutation {
  createStory(input: CreateStoryInput!): Story
  updateStory(input: UpdateStoryInput!): Story
  deleteStory(input: DeleteStoryInput!): Story
}

type Subscription {
  onCreateStory: Story @aws_subscribe(mutations: ["createStory"])
  onUpdateStory: Story @aws_subscribe(mutations: ["updateStory"])
  onDeleteStory: Story @aws_subscribe(mutations: ["deleteStory"])
}
